--------------------------------------------------------------------------------
-- Title         : Register 1-bit with Enabled Asynchronous Reset D Flip-Flop
-- Project       : VHDL Synthesis Overview
-------------------------------------------------------------------------------
-- File          : Register1bit.vhd
-- Author        : Aaron Thomas  <athom254@uottawa.ca>
-- Created       : 2024/05/30
-- Last modified : 2024/05/30
-------------------------------------------------------------------------------
-- Description : This file defines a 1-bit register using an enabled asynchronous
--                reset D flip-flop as a component. The architecture is done at 
--                the RTL abstraction level.
-------------------------------------------------------------------------------
-- Modification history :
-- 2024/05/30  Aaron Thomas  Created documentation
-------------------------------------------------------------------------------
-- This file is provided by Aaron Thomas. Permission to make digital or hard 
-- copies of part or all of this work for personal or classroom use is granted 
-- without fee provided that copies are not made or distributed for profit or 
-- commercial advantage and that copies bear this notice and the full citation 
-- of this work. Prior permission is required to copy, republish, redistribute, 
-- or post this work. This notice is adapted from the ACM copyright notice.
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

ENTITY Register1bit IS
    PORT(
        i_clock       : IN  STD_LOGIC;
        i_resetBar    : IN  STD_LOGIC;
        i_enable      : IN  STD_LOGIC;
        i_d           : IN  STD_LOGIC;
        o_q           : OUT STD_LOGIC
    );
END Register1bit;

ARCHITECTURE rtl OF Register1bit IS
    COMPONENT enARdFF_2 IS
    PORT(
        i_resetBar : IN  STD_LOGIC;
        i_d        : IN  STD_LOGIC;
        i_enable   : IN  STD_LOGIC;
        i_clock    : IN  STD_LOGIC;
        o_q, o_qBar: OUT STD_LOGIC
    );
    END COMPONENT;
    
    SIGNAL int_q: STD_LOGIC;
    
BEGIN
    reg: enARdFF_2
    PORT MAP(
        i_resetBar => i_resetBar,
        i_d        => i_d,
        i_enable   => i_enable,
        i_clock    => i_clock,
        o_q        => int_q,
        o_qBar     => OPEN
    );
    
    o_q <= int_q;
    
END rtl;
