--------------------------------------------------------------------------------
-- Title         : Top Floating Point Adder
-- Project       : VHDL Synthesis Overview
-------------------------------------------------------------------------------
-- File          : TopFloatAdd.vhd
-- Author        : Aaron Thomas <athom254@uottawa.ca>
-- Created       : 2024/05/30
-- Last modified : 2024/05/30
-------------------------------------------------------------------------------
-- Description : This file defines a top-level entity for a floating-point 
--               adder. It includes components for sign and mantissa handling,
--               exponent handling, mantissa extraction, mantissa addition,
--               exponent comparison, and final result formation. The output 
--               includes the result and an overflow signal.
-------------------------------------------------------------------------------
-- Modification history :
-- 2024/05/30  Aaron Thomas  Initial creation
-------------------------------------------------------------------------------
-- This file is provided by Aaron Thomas. Permission to make 
-- digital or hard copies of part or all of this work for personal or classroom 
-- use is granted without fee provided that copies are not made or distributed 
-- for profit or commercial advantage and that copies bear this notice and the 
-- full citation of this work. Prior permission is required to copy, republish, 
-- redistribute, or post this work. This notice is adapted from the ACM copyright notice.
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

ENTITY TopFloatAdd IS
    PORT(
        -- Input ports
        clk : IN STD_LOGIC;
        loadSignMantissa, shiftSignMantissa, clearSignMantissa : IN STD_LOGIC;
        dataSignMantissa : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
        loadExponent, incExponent, clearExponent : IN STD_LOGIC;
        loadCounter, shiftCounter, clearCounter : IN STD_LOGIC;
        loadDataA, shiftDataA, clearDataA : IN STD_LOGIC;
        dataA : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
        loadCounter2, shiftCounter2, clearCounter2 : IN STD_LOGIC;
        loadDataB, shiftDataB, clearDataB : IN STD_LOGIC;
        dataB : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
        loadMux, shiftMux, clearMux : IN STD_LOGIC;
        selectMux : IN STD_LOGIC_VECTOR(2 DOWNTO 0); -- 3-bit select input
        dataMux0, dataMux1 : IN STD_LOGIC_VECTOR(6 DOWNTO 0); -- 7-bit inputs
        -- Output ports
        result : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
        overflow : OUT STD_LOGIC
    );
END ENTITY;

ARCHITECTURE rtl OF TopFloatAdd IS
    SIGNAL signMantissa : STD_LOGIC_VECTOR(7 DOWNTO 0);
    SIGNAL exponent : STD_LOGIC_VECTOR(6 DOWNTO 0);
    SIGNAL mantissaA, mantissaB : STD_LOGIC_VECTOR(7 DOWNTO 0);
    SIGNAL mantissaOut : STD_LOGIC_VECTOR(7 DOWNTO 0);
    SIGNAL resultTemp : STD_LOGIC_VECTOR(15 DOWNTO 0);
    SIGNAL cmpEqual, cmpLessThan : STD_LOGIC;
    SIGNAL overflowAdder : STD_LOGIC;

    COMPONENT eightBitShiftRegister IS
        PORT(
            clk : IN STD_LOGIC;
            load, shift, clear : IN STD_LOGIC;
            data_in : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
            data_out : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
        );
    END COMPONENT;

    COMPONENT nineBitAdder IS
        PORT(
            clk : IN STD_LOGIC;
            load, shift, clear : IN STD_LOGIC;
            data_in : IN STD_LOGIC_VECTOR(8 DOWNTO 0);
            data_out : OUT STD_LOGIC_VECTOR(8 DOWNTO 0);
            overflow : OUT STD_LOGIC
        );
    END COMPONENT;

    COMPONENT sevenBitCounter IS
        PORT(
            i_clk : IN STD_LOGIC;
            i_resetBar : IN STD_LOGIC;
            i_load, i_inc, i_dec : IN STD_LOGIC;
            i_input : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
            o_Out : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
            o_Overflow : OUT STD_LOGIC
        );
    END COMPONENT;

    COMPONENT sevenBitComparator IS
        PORT(
            a, b : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
            equal, less_than : OUT STD_LOGIC
        );
    END COMPONENT;

    COMPONENT mux7to1 IS
        PORT(
            i_S : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
            i_I0, i_I1, i_I2, i_I3, i_I4, i_I5, i_I6 : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
            o_O : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
        );
    END COMPONENT;

BEGIN
    -- Sign and Mantissa Handling
    signMantissaReg: eightBitShiftRegister
    PORT MAP(
        clk => clk,
        load => loadSignMantissa,
        shift => shiftSignMantissa,
        clear => clearSignMantissa,
        data_in => dataSignMantissa,
        data_out => signMantissa
    );

    -- Exponent Handling
    exponentCounter: sevenBitCounter
    PORT MAP(
        i_clk => clk,
        i_resetBar => clearExponent,
        i_load => loadExponent,
        i_inc => incExponent,
        i_dec => '0', -- Unused
        i_input => exponent,
        o_Out => exponent,
        o_Overflow => overflow
    );

    -- Mantissa Extraction
    muxSelectReg: eightBitShiftRegister
    PORT MAP(
        clk => clk,
        load => loadMux,
        shift => shiftMux,
        clear => clearMux,
        data_in => selectMux,
        data_out => mantissaOut
    );

    -- Mux
    mantissaMux: mux7to1
    PORT MAP(
        i_S => selectMux,
        i_I0 => dataMux0,
        i_I1 => dataMux1,
        i_I2 => (OTHERS => '0'), -- Unused
        i_I3 =>(OTHERS => '0'), -- Unused
        i_I4 => (OTHERS => '0'), -- Unused
        i_I5 => (OTHERS => '0'), -- Unused
        i_I6 => (OTHERS => '0'), -- Unused
        o_O => mantissaA
    );

    mantissaB <= mantissaOut; -- Assuming mantissaB comes from another source

    -- Mantissa Addition
    mantissaAdder: nineBitAdder
    PORT MAP(
        clk => clk,
        load => '0', -- Not using load mode for mantissa addition
        shift => '0', -- Not using shift mode for mantissa addition
        clear => '0', -- Not using clear mode for mantissa addition
        data_in => signMantissa & mantissaA,
        data_out => resultTemp,
        overflow => overflowAdder
    );

    -- Exponent Comparison
    exponentComparator: sevenBitComparator
    PORT MAP(
        a => exponent,
        b => exponent,
        equal => cmpEqual,
        less_than => cmpLessThan
    );

    -- Select Mantissa Based on Exponent Comparison
    resultMux: mux7to1
    PORT MAP(
        i_S => (OTHERS => '0'), -- Not using select signals
        i_I0 => mantissaA,
        i_I1 => mantissaB,
        i_I2 => (OTHERS => '0'), -- Unused
        i_I3 => (OTHERS => '0'), -- Unused
        i_I4 => (OTHERS => '0'), -- Unused
        i_I5 => (OTHERS => '0'), -- Unused
        i_I6 => (OTHERS => '0'), -- Unused
        o_O => resultTemp(6 DOWNTO 0) -- Only selecting the first 7 bits of the result
    );

    -- Final Result Formation
    result <= resultTemp(15 DOWNTO 0); -- Outputting the entire 16-bit result
    overflow <= overflowAdder OR cmpLessThan; -- Overflow if mantissa addition overflows or exponent comparison indicates less than
END ARCHITECTURE;
