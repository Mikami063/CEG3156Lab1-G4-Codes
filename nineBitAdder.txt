--------------------------------------------------------------------------------
-- Title         : 9-Bit Adder
-- Project       : VHDL Synthesis Overview
-------------------------------------------------------------------------------
-- File          : nineBitAdder.vhd
-- Author        : Aaron Thomas  <athom254@uottawa.ca>
-- Created       : 2024/05/30
-- Last modified : 2024/05/30
-------------------------------------------------------------------------------
-- Description : This file defines a 9-bit adder that computes the sum of two 
--                9-bit inputs along with a carry-out signal. It consists of 
--                eight instances of a one-bit adder component interconnected 
--                to perform the addition operation.
-------------------------------------------------------------------------------
-- Modification history :
-- 2024/05/30  Aaron Thomas  Initial creation
-------------------------------------------------------------------------------
-- This file is provided by Aaron Thomas. Permission to make digital or hard 
-- copies of part or all of this work for personal or classroom use is granted 
-- without fee provided that copies are not made or distributed for profit or 
-- commercial advantage and that copies bear this notice and the full citation 
-- of this work. Prior permission is required to copy, republish, redistribute, 
-- or post this work. This notice is adapted from the ACM copyright notice.
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

ENTITY nineBitAdder IS
    PORT(
        i_Ai, i_Bi : IN  STD_LOGIC_VECTOR(8 DOWNTO 0);
        o_CarryOut : OUT STD_LOGIC;
        o_Sum      : OUT STD_LOGIC_VECTOR(8 DOWNTO 0)
    );
END nineBitAdder;

ARCHITECTURE rtl OF nineBitAdder IS
    SIGNAL int_Sum, int_CarryOut : STD_LOGIC_VECTOR(8 DOWNTO 0);
    SIGNAL gnd : STD_LOGIC := '0';

    COMPONENT oneBitAdder
    PORT(
        i_CarryIn   : IN  STD_LOGIC;
        i_Ai, i_Bi  : IN  STD_LOGIC;
        o_Sum, o_CarryOut : OUT  STD_LOGIC
    );
    END COMPONENT;

BEGIN
    add8: oneBitAdder
        PORT MAP (i_CarryIn => int_CarryOut(7),
                  i_Ai => i_Ai(8),
                  i_Bi => i_Bi(8),
                  o_Sum => int_Sum(8),
                  o_CarryOut => int_CarryOut(8));

    add7: oneBitAdder
        PORT MAP (i_CarryIn => int_CarryOut(6),
                  i_Ai => i_Ai(7),
                  i_Bi => i_Bi(7),
                  o_Sum => int_Sum(7),
                  o_CarryOut => int_CarryOut(7));

    add6: oneBitAdder
        PORT MAP (i_CarryIn => int_CarryOut(5),
                  i_Ai => i_Ai(6),
                  i_Bi => i_Bi(6),
                  o_Sum => int_Sum(6),
                  o_CarryOut => int_CarryOut(6));

    add5: oneBitAdder
        PORT MAP (i_CarryIn => int_CarryOut(4),
                  i_Ai => i_Ai(5),
                  i_Bi => i_Bi(5),
                  o_Sum => int_Sum(5),
                  o_CarryOut => int_CarryOut(5));

    add4: oneBitAdder
        PORT MAP (i_CarryIn => int_CarryOut(3),
                  i_Ai => i_Ai(4),
                  i_Bi => i_Bi(4),
                  o_Sum => int_Sum(4),
                  o_CarryOut => int_CarryOut(4));

    add3: oneBitAdder
        PORT MAP (i_CarryIn => int_CarryOut(2),
                  i_Ai => i_Ai(3),
                  i_Bi => i_Bi(3),
                  o_Sum => int_Sum(3),
                  o_CarryOut => int_CarryOut(3));

    add2: oneBitAdder
        PORT MAP (i_CarryIn => int_CarryOut(1),
                  i_Ai => i_Ai(2),
                  i_Bi => i_Bi(2),
                  o_Sum => int_Sum(2),
                  o_CarryOut => int_CarryOut(2));

    add1: oneBitAdder
        PORT MAP (i_CarryIn => int_CarryOut(0),
                  i_Ai => i_Ai(1),
                  i_Bi => i_Bi(1),
                  o_Sum => int_Sum(1),
                  o_CarryOut => int_CarryOut(1));

    add0: oneBitAdder
        PORT MAP (i_CarryIn => gnd,
                  i_Ai => i_Ai(0),
                  i_Bi => i_Bi(0),
                  o_Sum => int_Sum(0),
                  o_CarryOut => int_CarryOut(0));

    -- Output Driver
    o_Sum <= int_Sum;
    o_CarryOut <= int_CarryOut(8);
END rtl;
