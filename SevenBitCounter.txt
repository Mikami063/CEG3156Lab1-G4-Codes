--------------------------------------------------------------------------------
-- Title         : 7-Bit Counter
-- Project       : VHDL Synthesis Overview
-------------------------------------------------------------------------------
-- File          : counter_7bit.vhd
-- Author        : Aaron Thomas  <athom254@uottawa.ca>
-- Created       : 2024/05/30
-- Last modified : 2024/05/30
-------------------------------------------------------------------------------
-- Description : This file defines a 7-bit counter with control inputs for 
--                clocking, resetting, loading, incrementing, and decrementing. 
--                It also has an input for presetting a value and outputs the 
--                current count value and an overflow signal.
-------------------------------------------------------------------------------
-- Modification history :
-- 2024/05/30  Aaron Thomas  Initial creation
-------------------------------------------------------------------------------
-- This file is provided by Aaron Thomas. Permission to make digital or hard 
-- copies of part or all of this work for personal or classroom use is granted 
-- without fee provided that copies are not made or distributed for profit or 
-- commercial advantage and that copies bear this notice and the full citation 
-- of this work. Prior permission is required to copy, republish, redistribute, 
-- or post this work. This notice is adapted from the ACM copyright notice.
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY counter_7bit IS
    PORT(
        i_clk : IN std_logic;
        i_resetBar : IN std_logic;
        i_load, i_inc, i_dec: IN std_logic;
        i_input: IN STD_LOGIC_VECTOR(6 DOWNTO 0);
        o_Out : OUT std_logic_vector(6 DOWNTO 0);
        o_Overflow: OUT std_logic
    );
END counter_7bit;

ARCHITECTURE rtl OF counter_7bit IS
    SIGNAL int_a6, int_a5, int_a4, int_a3, int_a2, int_a1, int_a0 : std_logic;
    SIGNAL int_b6, int_b5, int_b4, int_b3, int_b2, int_b1, int_b0 : std_logic;
    SIGNAL int_S : std_logic_vector(2 DOWNTO 0); -- Select signal for mux7to1

    COMPONENT enARdFF_2 IS
        PORT(
            i_resetBar : IN  STD_LOGIC;
            i_d        : IN  STD_LOGIC;
            i_enable   : IN  STD_LOGIC;
            i_clock    : IN  STD_LOGIC;
            o_q, o_qBar: OUT STD_LOGIC
        );
    END COMPONENT;

    COMPONENT mux7to1 IS
        PORT(
            i_S  : IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
            i_I0, i_I1, i_I2, i_I3, i_I4, i_I5, i_I6 : IN  STD_LOGIC;
            o_O  : OUT STD_LOGIC
        );
    END COMPONENT;

BEGIN
    -- Generation of select signals for the mux
    int_S(2) <= i_inc or i_load;
    int_S(1) <= i_dec or i_load;
    int_S(0) <= '0'; -- Additional bit for mux7to1

    -- Mux components for each bit
    mux_6: mux7to1
    PORT MAP(
        i_S => int_S,
        i_I0 => int_a6,
        i_I1 => (int_a6 and int_a0) or (int_a6 and int_a1) or (int_a6 and int_a2) or (int_a6 and int_a3) or (int_a6 and int_a4) or (int_a6 and int_a5) or (not int_a6 and not int_a5 and not int_a4 and not int_a3 and not int_a2 and not int_a1 and not int_a0),
        i_I2 => (int_a6 and not int_a5) or (int_a6 and not int_a4) or (int_a6 and not int_a3) or (int_a6 and not int_a2) or (int_a6 and not int_a1) or (int_a6 and not int_a0) or (not int_a6 and int_a5 and int_a4 and int_a3 and int_a2 and int_a1 and int_a0),
        i_I3 => i_input(6),
        i_I4 => '0', -- Additional bit
        i_I5 => '0', 
        i_I6 => '0', 
        o_O => int_b6
    );

    mux_5: mux7to1
    PORT MAP(
        i_S => int_S,
        i_I0 => int_a5,
        i_I1 => (int_a5 and int_a0) or (int_a5 and int_a1) or (int_a5 and int_a2) or (int_a5 and int_a3) or (int_a5 and int_a4) or (int_a5 and not int_a4 and not int_a3 and not int_a2 and not int_a1 and not int_a0),
        i_I2 => (int_a5 and not int_a4) or (int_a5 and not int_a3) or (int_a5 and not int_a2) or (int_a5 and not int_a1) or (int_a5 and not int_a0) or (not int_a5 and int_a4 and int_a3 and int_a2 and int_a1 and int_a0),
        i_I3 => i_input(5),
        i_I4 => '0', -- Additional bit
        i_I5 => '0', 
        i_I6 => '0', 
        o_O => int_b5
    );

    mux_4: mux7to1
    PORT MAP(
        i_S => int_S,
        i_I0 => int_a4,
        i_I1 => (int_a4 and int_a0) or (int_a4 and int_a1) or (int_a4 and int_a2) or (int_a4 and int_a3) or (not int_a4 and not int_a3 and not int_a2 and not int_a1 and not int_a0),
        i_I2 => (int_a4 and not int_a3) or (int_a4 and not int_a2) or (int_a4 and not int_a1) or (int_a4 and not int_a0) or (not int_a4 and int_a3 and int_a2 and int_a1 and int_a0),
        i_I3 => i_input(4),
        i_I4 => '0', -- Additional bit
        i_I5 => '0', 
        i_I6 => '0',
		     o_O => int_b4
    );

    mux_3: mux7to1
    PORT MAP(
        i_S => int_S,
        i_I0 => int_a3,
        i_I1 => (int_a3 and int_a0) or (int_a3 and int_a1) or (int_a3 and int_a2) or (not int_a3 and not int_a2 and not int_a1 and not int_a0),
        i_I2 => (int_a3 and not int_a2) or (int_a3 and not int_a1) or (int_a3 and not int_a0) or (not int_a3 and int_a2 and int_a1 and int_a0),
        i_I3 => i_input(3),
        i_I4 => '0', -- Additional bit
        i_I5 => '0', -- Additional bit
        i_I6 => '0', -- Additional bit
        o_O => int_b3
    );

    mux_2: mux7to1
    PORT MAP(
        i_S => int_S,
        i_I0 => int_a2,
        i_I1 => (int_a2 and int_a0) or (int_a2 and int_a1) or (not int_a2 and not int_a1 and not int_a0),
        i_I2 => (int_a2 and not int_a1) or (int_a2 and not int_a0) or (not int_a2 and int_a1 and int_a0),
        i_I3 => i_input(2),
        i_I4 => '0', -- Additional bit
        i_I5 => '0', -- Additional bit
        i_I6 => '0', -- Additional bit
        o_O => int_b2
    );

    mux_1: mux7to1
    PORT MAP(
        i_S => int_S,
        i_I0 => int_a1,
        i_I1 => (int_a1 and int_a0) or (not int_a1 and not int_a0),
        i_I2 => (int_a1 and not int_a0) or (not int_a1 and int_a0),
        i_I3 => i_input(1),
        i_I4 => '0', -- Additional bit
        i_I5 => '0', -- Additional bit
        i_I6 => '0', -- Additional bit
        o_O => int_b1
    );

    mux_0: mux7to1
    PORT MAP(
        i_S => int_S,
        i_I0 => int_a0,
        i_I1 => not int_a0,
        i_I2 => not int_a0,
        i_I3 => i_input(0),
        i_I4 => '0', -- Additional bit
        i_I5 => '0', -- Additional bit
        i_I6 => '0', -- Additional bit
        o_O => int_b0
    );

    -- Registers for each bit
    reg_a6: enARdFF_2
    PORT MAP(
        i_clock => i_clk,
        i_resetBar => i_resetBar,
        i_enable => '1',
        i_d => int_b6,
        o_q => int_a6
    );

    reg_a5: enARdFF_2
    PORT MAP(
        i_clock => i_clk,
        i_resetBar => i_resetBar,
        i_enable => '1',
        i_d => int_b5,
        o_q => int_a5
    );

    reg_a4: enARdFF_2
    PORT MAP(
        i_clock => i_clk,
        i_resetBar => i_resetBar,
        i_enable => '1',
        i_d => int_b4,
        o_q => int_a4
    );

    reg_a3: enARdFF_2
    PORT MAP(
        i_clock => i_clk,
        i_resetBar => i_resetBar,
        i_enable => '1',
        i_d => int_b3,
        o_q => int_a3
    );

    reg_a2: enARdFF_2
    PORT MAP(
        i_clock => i_clk,
        i_resetBar => i_resetBar,
        i_enable => '1',
        i_d => int_b2,
        o_q => int_a2
    );

    reg_a1: enARdFF_2
    PORT MAP(
        i_clock => i_clk,
        i_resetBar => i_resetBar,
        i_enable => '1',
        i_d => int_b1,
        o_q => int_a1
    );

    reg_a0: enARdFF_2
    PORT MAP(
        i_clock => i_clk,
        i_resetBar => i_resetBar,
        i_enable => '1',
        i_d => int_b0,
        o_q => int_a0
    );

    -- Output assignment
    o_Out <= int_a6 & int_a5 & int_a4 & int_a3 & int_a2 & int_a1 & int_a0;
    o_Overflow <= (int_S(2) and int_a6 and int_a5 and int_a4 and int_a3 and int_a2 and int_a1 and int_a0) or (int_S(1) and not int_a6 and not int_a5 and not int_a4 and not int_a3 and not int_a2 and not int_a1 and not int_a0);

END rtl;
		  